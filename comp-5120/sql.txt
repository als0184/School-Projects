1. Show the subject names of books supplied by *supplier2*.

SELECT CategoryName
FROM db_subject
WHERE SubjectID IN (
  SELECT SubjectID
  FROM db_book
  WHERE SupplierID = (
    SELECT SupplierID
    FROM db_supplier
    WHERE CompanyName = "supplier2"
  )
)


2. Show the name and price of the most expensive book supplied by
     *supplier3*.

SELECT b.Title, b.UnitPrice
FROM db_book AS b
JOIN db_supplier AS s ON b.SupplierID = s.SupplierID
WHERE s.CompanyName = "supplier3"
ORDER BY b.UnitPrice DESC
LIMIT 1;


3. Show the unique names of all books ordered by *lastname1
     firstname1*.

SELECT DISTINCT b.Title
FROM db_book AS b
JOIN db_order_detail AS od ON b.BookID = od.BookID
JOIN db_order AS o ON o.OrderID = od.OrderID
JOIN db_customer AS c ON c.CustomerID = o.CustomerID
WHERE b.Title IS NOT NULL
ORDER BY b.Title ASC;


4. Show the title of books which have more than 10 units in stock.

SELECT Title
FROM db_book
WHERE Quantity > 10
GROUP BY BookID
HAVING SUM(Quantity) > 10

5. Show the total price *lastname1 firstname1* has paid for the books.

SELECT c.LastName, c.FirstName, SUM(od.Quantity * b.UnitPrice) AS TotalPrice
FROM db_customer c, db_order o, db_order_detail od, db_book b
WHERE c.LastName = 'lastname1' AND c.FirstName = 'firstname1'
  AND c.CustomerID = o.CustomerID
  AND o.OrderID = od.OrderID
  AND od.BookID = b.BookID
GROUP BY c.LastName, c.FirstName;


6. Show the names of the customers who have paid less than $80 in
     totals.

SELECT c.FirstName, c.LastName, SUM(b.UnitPrice * od.Quantity) AS TotalPaid
FROM db_book b
JOIN db_order_detail od ON b.BookID = od.BookID
JOIN db_order o ON od.OrderID = o.OrderID
JOIN db_customer c ON o.CustomerID = c.CustomerID
GROUP BY c.CustomerID
HAVING TotalPaid < 80
ORDER BY TotalPaid;


7. Show the name of books supplied by *supplier2*.

SELECT b.Title
FROM db_book b, db_supplier s
WHERE b.SupplierID = s.SupplierID
  AND s.CompanyName = "supplier2"
ORDER BY b.Title;


8. Show the total price each customer paid and their names.  List the
     result in descending price.

SELECT c.FirstName, c.LastName, SUM(b.UnitPrice * od.Quantity) as TotalPrice
FROM db_customer c
JOIN db_order o ON c.CustomerID = o.CustomerID
JOIN db_order_detail od ON o.OrderID = od.OrderID
JOIN db_book b ON od.BookID = b.BookID
GROUP BY c.CustomerID
ORDER BY TotalPrice DESC


9. Show the names of all the books shipped on 08/04/2016 and their
     shippers' names.

SELECT b.Title, s.ShipperName
FROM db_book b
JOIN db_order_detail od ON b.BookID = od.BookID
JOIN db_order o ON od.OrderID = o.OrderID AND o.ShippedDate = '8/4/2016'
JOIN db_shipper s ON o.ShipperID = s.ShipperID;


10. Show the unique names of all the books *lastname1 firstname1* and
     *lastname4 firstname4* *both* ordered.

SELECT b.Title
FROM db_book b
INNER JOIN db_order_detail od ON b.BookID = od.BookID
INNER JOIN db_order o ON od.OrderID = o.OrderID
INNER JOIN db_customer c ON o.CustomerID = c.CustomerID
WHERE (c.LastName = 'lastname1' AND c.FirstName = 'firstname1')
INTERSECT
SELECT b.Title
FROM db_book b
INNER JOIN db_order_detail od ON b.BookID = od.BookID
INNER JOIN db_order o ON od.OrderID = o.OrderID
INNER JOIN db_customer c ON o.CustomerID = c.CustomerID
WHERE (c.LastName = 'lastname4' AND c.FirstName = 'firstname4');


11. Show the names of all the books *lastname6 firstname6* was
     responsible for.

SELECT DISTINCT b.Title
FROM db_employee e
INNER JOIN db_order o ON e.EmployeeID = o.EmployeeID
INNER JOIN db_order_detail od ON o.OrderID = od.OrderID
INNER JOIN db_book b ON od.BookID = b.BookID
WHERE e.FirstName = 'firstname6' AND e.LastName = 'lastname6';


12. Show the names of all the ordered books and their total
     quantities.  List the result in ascending quantity.

SELECT b.Title AS BookTitle, SUM(od.Quantity) AS TotalQuantity
FROM db_book b, db_order_detail od
WHERE od.BookID = b.BookID
GROUP BY b.BookID
ORDER BY TotalQuantity ASC;

13. Show the names of the customers who ordered at least 2 books.

SELECT c.FirstName, c.LastName
FROM db_order o
JOIN db_order_detail od ON o.OrderID = od.OrderID
JOIN db_customer c ON o.CustomerID = c.CustomerID
GROUP BY c.CustomerID
HAVING SUM(od.Quantity) > 1

14. Show the name of the customers who have ordered at least a book in
     *category3* or *category4* and the book names.

SELECT c.FirstName, c.LastName, GROUP_CONCAT(b.Title SEPARATOR ', ') AS BookNames
FROM db_book b, db_order o, db_order_detail od, db_customer c, db_subject s
WHERE b.SubjectID=s.SubjectID
  AND (s.CategoryName="category3" OR s.CategoryName="category4")
  AND b.BookID=od.BookID
  AND od.OrderID=o.OrderID
  AND o.CustomerID=c.CustomerID
GROUP BY c.CustomerID;


15. Show the name of the customer who has ordered at least one book
     written by *author1*.

SELECT DISTINCT c.FirstName, c.LastName
FROM db_book b
JOIN db_order_detail od ON b.BookID = od.BookID
JOIN db_order o ON od.OrderID = o.OrderID
JOIN db_customer c ON o.CustomerID = c.CustomerID
WHERE b.Author = "author1"


16. Show the name and total sale (price of orders) of each employee.

SELECT e.FirstName, e.LastName, SUM(od.Quantity * b.UnitPrice) AS `total`
FROM db_book b
JOIN db_order_detail od ON b.BookID = od.BookID
JOIN db_order o ON od.OrderID = o.OrderID
JOIN db_employee e ON o.EmployeeID = e.EmployeeID
GROUP BY e.EmployeeID, e.FirstName, e.LastName


17. Show the book names and their respective quantities for open
     orders (the orders which have not been shipped) at midnight
     08/04/2016.

SELECT b.Title, SUM(od.Quantity) AS quantity
FROM db_order o
JOIN db_order_detail od ON o.OrderID = od.OrderID
JOIN db_book b ON od.BookID = b.BookID
WHERE o.ShippedDate > '8/4/2016'
  OR o.ShippedDate IS NULL
GROUP BY b.BookID


18. Show the names of customers who have ordered more than 1 book and
     the corresponding quantities.  List the result in the descending
     quantity.

SELECT c.FirstName, c.LastName, SUM(od.Quantity) AS quantity
FROM db_order o
JOIN db_order_detail od ON o.OrderID = od.OrderID
JOIN db_customer c ON o.CustomerID = c.CustomerID
GROUP BY c.CustomerID
HAVING SUM(od.Quantity) > 1
ORDER BY quantity DESC


19. Show the names of customers who have ordered more than 3 books and
     their respective telephone numbers.

SELECT c.FirstName, c.LastName, c.Phone
FROM db_customer c
INNER JOIN db_order o ON c.CustomerID = o.CustomerID
INNER JOIN (
    SELECT od.OrderID, SUM(od.Quantity) AS total_qty
    FROM db_order_detail od
    GROUP BY od.OrderID
    HAVING total_qty > 3
) t ON o.OrderID = t.OrderID